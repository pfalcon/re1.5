#! /usr/bin/env python3

RE_EXEC = "./re"

test_suite = [
    # basics
    ("search", r"abc", "abcdef"),
    ("search", r"cde", "abcdef"),
    ("search", r"abc*", "abdef"),
    ("search", r"abc*", "abcccdef"),
    ("search", r"abc+", "abdef"),
    ("search", r"abc+", "abcccdef"),

    # match
    ("match", r"abc", "abcdef"),
    ("match", r"abc*", "abdef"),

    # nested group matching
    ("match", r"(([0-9]*)([a-z]*)[0-9]*)", "1234hello567"),
    ("match", r"([0-9]*)(([a-z]*)([0-9]*))", "1234hello567"),

    # named character classes
    ("match", r"\d+", "123abc456"),
    ("match", r"\s+", " \t123abc456"),
    ("match", r"\w+", "123abc_456 abc"),
    ("match", r"(\w+)\s+(\w+)", "ABC \t123hello456 abc"),
    ("match", r"(\S+)\s+(\D+)", "ABC \thello abc456 abc"),
    ("match", r"(([0-9]*)([a-z]*)\d*)", "123hello456"),
]

import re
import subprocess
from collections import OrderedDict

def parse_result(string, res):
    name, rest = res.split(b" ", 1)
    if rest == b"-no match-":
        return name, None
    assert rest.startswith(b"match ")
    rest = rest[6:]
    tuples = [eval(t) for t in rest.split()]
    matches = tuple(string[t[0]:t[1]] for t in tuples)
    return name, matches

def fit_str(string, width):
    if len(string) <= width:
        return string
    else:
        return string[:width - 2] + ".."

def main():
    engine_stats = OrderedDict()
    for kind, regex, string in test_suite:
        # run Python re to get correct result
        if kind == "match":
            py_res = re.match(regex, string)
        else:
            py_res = re.search(regex, string)
        if py_res is not None:
            py_res = (py_res.group(0),) + py_res.groups()

        # run our code
        re_res = subprocess.check_output([RE_EXEC, kind, regex, string])
        re_res = re_res.split(b'\n')[1:-1] # split lines, remove first and last

        # check result of each engine
        for engine in re_res:
            engine_name, re_res = parse_result(string, engine)
            try:
                stats = engine_stats[engine_name]
            except KeyError:
                engine_stats[engine_name] = stats = [0, 0]
            if py_res == re_res:
                print("PASS ", end="")
                stats[0] += 1
            else:
                print("FAIL ", end="")
                stats[1] += 1

        print("%-25s %-20s" % (fit_str(regex, 25), fit_str(string, 20)))

    print("Ran %d tests, results:" % len(test_suite))
    for name, stats in engine_stats.items():
        print("%15s %2d pass %2d fail" % (str(name, encoding='utf8'), stats[0], stats[1]))

if __name__ == "__main__":
    main()
